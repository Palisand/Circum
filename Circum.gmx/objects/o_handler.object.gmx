<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pre-Spawn Initialization

window_set_cursor(cr_none);  // not changed in global game settings because of debug room

// init global vars
instance_create(0, 0, o_globals);

// Particles
p_emitter = part_emitter_create(global.p_system);
p_type = part_type_create();

// Screen (Circular)
screen = surface_create(room_width, room_height);
drawn_to_surface = false;

tut_count = -1;
alpha_transition = 0;
prev_player_color = -1;

// Tutorial Setup
if (room_get_name(room) == "rm_tutorial"){
    tut_count = 0;
}
this_is_you_alpha = 1;
spawned_tether_length_orb = false;

// for slow motion
restoring_speed = false;
tween_time = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial Player and Orb Spawns

randomize();
level_create(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Defunct Player and Orb Spawns
/*
randomize();

//available for capture
num_free = 5;
//already claimed (not counting the orb you start on)
num_owned = 1;
//claimed by opponent (must be liberated by hammer)
num_opponent = 3;
//ricochet
num_dead = 3;
//dangerous
num_void = 1;

//how many orbs circle the starting orb
num_orb = num_free + num_owned + num_opponent + num_dead + num_void;

//the orb you start on plus all the DEFAULT orbs
num_to_win = 1+num_free + num_owned + num_opponent;

edge_buffer = 512;

var x_center = SCREEN_RADIUS;
var y_center = SCREEN_RADIUS;

// Screen (Circular)
screen = surface_create(room_width, room_height);

//starting orb
var orb;
orb = instance_create(x_center, y_center, o_orb);
//orb.speed = 0;
orb.fixed = true;
// Player
player_color = c_fuchsia;
player_id = -1;
with (instance_create(orb.x, y_center, o_player)) {
    num_orb_captured = other.num_owned;
    color = other.player_color;
    action_key = vk_space;
    num_to_win = other.num_to_win;
    other.player_id = self.id;
}

// hidden opponent
opponent_color = c_aqua;
opponent_id = -1;
with (instance_create(0,0, o_player)) {
    action_key = vk_escape;
    num_to_win = other.num_orb+1;
    visible = false;
    speed = 0;
    launch_speed = 0;
    orbit_speed = 0;
    other.opponent_id = self.id;
}

// Orbs that circle the starting orb
var rad = room_width/3;
for (var dir = 0; dir &lt; 360; dir += 360/num_orb) {
    var orb_x = x_center + rad*cos(degtorad(dir));
    var orb_y = y_center - rad*sin(degtorad(dir));
    with (instance_create(orb_x, orb_y, o_orb)) {
        speed = random_range(3,7);
        direction = random(360);
    }
}

//set their capturer or type
var orb_categories;
orb_categories[0] = num_free;
orb_categories[1] = num_owned;
orb_categories[2] = num_opponent;
orb_categories[3] = num_dead;
orb_categories[4] = num_void;

//loop thru orbs that circle the starting orb
var o_index = 1;
for(var i = 0; i &lt; 5; i++){
    for(var j = 0; j &lt; orb_categories[i]; j++){
        var cur_orb = instance_find(o_orb,o_index);
        
        //set parameters based on category
        switch(i){
        //free
        case 0: break;
        //already captured
        case 1:
            with cur_orb {
                captured = true;
                capturer = other.player_id;
                color = other.player_color;
            }
            break;
        //opponent captured
        case 2:
            with cur_orb {
                captured = true;
                capturer = other.opponent_id;
                color = other.opponent_color;
            }
            break;
        case 3:
            set_orb_type(cur_orb,DEAD_ORB);
            break;
        case 4:
            set_orb_type(cur_orb,VOID_ORB);
            break;
        }
        o_index++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up

part_emitter_destroy(global.p_system, p_emitter);
part_type_destroy(p_type);

surface_free(screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End, Restart

if (keyboard_check_pressed(vk_escape)) {
    game_end();
}

if (keyboard_check_pressed(ord("R"))) {
    if (keyboard_check(vk_shift)) {
        game_restart();
    }
    else {
        // RESTART CURRENT LEVEL
        has_launched = false;
        with (o_orb) {
            instance_destroy();
        }
        with (o_player) {
            instance_destroy();
        }
        if (room_get_name(room) == "rm_tutorial") {
            level_create(false);
            spawned_tether_length_orb = false;
        }
        else {
            level_create(true);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggles (visuals, trail, orb gravity)

if (keyboard_check_pressed(ord("V"))) {
    global.tmp_visuals_on = !global.tmp_visuals_on;
}

if (keyboard_check_pressed(ord("T"))) {
    global.pre_fix_trail = !global.pre_fix_trail;
}

if (keyboard_check_pressed(ord("G"))) {
    global.orb_gravity_on = !global.orb_gravity_on;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player has launched

if (!has_launched &amp;&amp; keyboard_check_pressed(vk_space)){
    has_launched = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return room_speed to normal


if (room_speed &lt; 60 &amp;&amp; !restoring_speed) {
    restoring_speed = true;
    room_speed_start = room_speed;
    tween_time = 0;
}

if (restoring_speed) {
    tween_time++;
    room_speed = ease_in_quart(tween_time, room_speed_start, 60 - room_speed_start, 20);
    if (room_speed &gt;= 60) {
        room_speed = 60;
        restoring_speed = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ambient

background_particles();

play_background();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Win

if (instance_exists(o_player)) {

    var plr = instance_find(o_player,0);
    
    //if the player has filled the screen, move to another game
    if (plr.draw_radius &gt;= 2*SCREEN_RADIUS) {
        global.winner = -1;
        global.snd_win_played = false;
        
        has_launched = false;
        spawned_tether_length_orb = false;
        
        //prepare for fade-in
        alpha_transition = 1;
        
        //erase objects
        with (plr) { instance_destroy(); }
        with (o_orb) { instance_destroy(); }
        with (o_fake_player) { instance_destroy(); }
        
        //progress along the tutorial sequence
        if (tut_count != -1) {
            tut_count = (tut_count + 1) % NUM_TUTORIALS;
        }
        
        level_create(false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Speed control

if (keyboard_check_pressed(vk_up) &amp;&amp; global.speed_scale &lt; 0.9) {
    global.speed_scale += 0.05;
}
if (keyboard_check_pressed(vk_down) &amp;&amp; global.speed_scale &gt; 0.2) {
    global.speed_scale -= 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tutorial Specific

// Tether Level
if (room_get_name(room) == "rm_tutorial") {
    if ((tut_count == 1 || tut_count == 2) &amp;&amp; o_player.tethered &amp;&amp; !spawned_tether_length_orb) {
        var dist = point_distance(o_player.x, o_player.y, SCREEN_RADIUS, SCREEN_RADIUS);
        var dir = o_player.direction - 180;
        var orb = instance_create(SCREEN_RADIUS + lengthdir_x(dist, dir), SCREEN_RADIUS + lengthdir_y(dist, dir), o_orb);
        orb.initial_speed = 0;
        if (tut_count == 2) {
            set_orb_type(orb, CAPTURED_ORB);
        }
        spawned_tether_length_orb = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Framerate &amp; speed scale

debug_text = ("Framerate: " + string(fps));
debug_text += ("#Actual Framerate: " + string(fps_real));
debug_text += ("#Speed scale: " + string(global.speed_scale));
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_font(font_debug);
draw_text(0, 0, debug_text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Circlular Screen

if (!drawn_to_surface) {  // this only needs to happen once
    drawn_to_surface = true;
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);  // make entire screen black
    draw_set_blend_mode(bm_subtract);
    // DRAW WITH PRIMITIVES OR VERTEX BUFFERS FOR GREATER PRECISION?!
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, room_width/2, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
}

if (surface_exists(screen)) {
    draw_surface(screen, 0, 0);
}
else {
    screen = surface_create(room_width, room_height);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade-in
if (alpha_transition &gt; 0.001) {
    draw_set_alpha(alpha_transition);
    alpha_transition = lerp(alpha_transition,0,0.1);
    draw_set_color(global.player_color);
    draw_circle(SCREEN_RADIUS,SCREEN_RADIUS,SCREEN_RADIUS,false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level text, if applicable
if (level_text != "" &amp;&amp; (!has_launched || level_text_alpha &gt; 0.001)) {
    draw_set_color(c_white);
    draw_set_font(font_main);
    draw_set_halign(fa_right);
    draw_set_alpha(level_text_alpha);
    draw_text(SCREEN_RADIUS, 128, level_text);
    if (! has_launched) {
        level_text_alpha = lerp(level_text_alpha,1,0.08);
    }
    else { level_text_alpha = lerp(level_text_alpha,0,0.04); }
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This is You

if (room_get_name(room) == "rm_tutorial" &amp;&amp; tut_count = 0) {
    if (o_player.current_orb != -1 &amp;&amp; this_is_you_alpha &gt; 0) {
        this_is_you_alpha -= 0.05;
    }
    draw_set_colour(global.player_color);
    draw_set_alpha(this_is_you_alpha);
    draw_text(o_player.x + 200, o_player.y, "This is You");
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
