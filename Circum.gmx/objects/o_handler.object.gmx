<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

// initialize globals
instance_create(0, 0, o_globals);

num_orb = 11;
edge_buffer = 512;

var x_center = SCREEN_RADIUS;
var y_center = SCREEN_RADIUS;

// Screen (Circular)
screen = surface_create(room_width, room_height);

var orb;
// Player 1
orb = instance_create(0, y_center, o_orb);
orb.x = orb.orbit_radius;
orb.speed = 0;
with (instance_create(orb.x, y_center, o_player)) {
    color = c_white;
    action_key = vk_lshift;
}

// Player 2
orb = instance_create(0, y_center, o_orb);
orb.x = room_width - orb.orbit_radius;
orb.speed = 0;
with (instance_create(orb.x, y_center, o_player)) {
    color = c_black;
    action_key = vk_enter;  // cannot be vk_rshift (only one shift key registered at a time)
}

// Orbs
for (var dir = 0; dir &lt; 360; dir += 360/num_orb) {
    instance_create(
        x_center + lengthdir_x(x_center - edge_buffer, dir),
        y_center + lengthdir_y(y_center - edge_buffer, dir),
        o_orb
    );
}

//for debugging purposes, really
/*
var dead = instance_find(o_orb,2);
set_orb_type(dead,DEAD_ORB);
var void = instance_find(o_orb,3);
set_orb_type(void,VOID_ORB);
var master = instance_find(o_orb,4);
set_orb_type(master,MASTER_ORB);

/*
repeat (num_orb) {
    var dir = random(360);
    instance_create(
        random_range(x_center, x_center + lengthdir_x(x_center - edge_buffer, dir)),
        random_range(y_center, y_center + lengthdir_y(y_center - edge_buffer, dir)),
        o_orb
    );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End, Restart, Fullscreen

if (keyboard_check_pressed(vk_escape)) {
    game_end();
}

if (keyboard_check_pressed(ord("R"))) {
    game_restart();
}

if (keyboard_check_pressed(ord("F"))) {
    window_set_fullscreen(!window_get_fullscreen());
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn visuals on or off

if (keyboard_check_pressed(ord("V"))) {
    global.tmp_visuals_on = !global.tmp_visuals_on;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Circlular Screen

surface_set_target(screen);
draw_clear_alpha(c_black, 1);  // make entire screen black
draw_set_blend_mode(bm_subtract);
// DRAW PRIMITIVE INSTEAD FOR GREATER PRECISION! (triangle--)
draw_set_circle_precision(64);
draw_circle(room_width/2, room_height/2, room_width/2, false);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
surface_reset_target();

if (surface_exists(screen)) {
    draw_surface(screen, 0, 0);
}
else {
    screen = surface_create(room_width, room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
