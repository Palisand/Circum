<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set in o_handler.Create
color = c_white;
action_key = vk_shift;

trail_length = 30;          // in the anticipation of a longer trail under a certain condition
draw_radius = 5;
radius = 5;
num_orb_captured = 0;
launch_speed = 20;
direction = choose(1, -1);  // randomly begin with a clockwise or counter-clockwise rotation

orbit = 0;
orbit_speed = 0;
orbit_speed_set = 3;
orbiting = false;
tethered = false;
current_orb = -1;
nearest_orb = -1;
dist_to_nearest = room_width * 2;  // pseudo MAX_INT

// Offset by one because we will capture the initial orb
// (that orb should not be counted)
capture_streak = -1;
possession_streak_used = false;

col_edge = false;
col_orb_set = false;

// Ricochet Streak Variables
ricochet_streak = 0;    // Counter for the current ricochet streak
ricochet_reward = 0;    // Records the ricochet reward (for the current version either 3 or 6)

scale[0] = 2/3;
scale[1] = 3/4;
scale[2] = 5/6;
scale[3] = 8/9;
scale[4] = 1/1;
scale[5] = 9/8;
scale[6] = 5/4;
scale[7] = 4/3;

scale_capture[0] = 4/3;
scale_capture[1] = 3/2;
scale_capture[2] = 5/3;
scale_capture[3] = 7/4;
scale_capture[4] = 2/1;
scale_capture[5] = 17/8;
scale_capture[6] = 9/4;
scale_capture[7] = 7/3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Win

//if there isn't already a winner, check if something changed
if (global.winner &lt; 0) {

    //you got enough to win (normal way or master orb captured)
    if (num_orb_captured &gt; instance_number(o_orb) / instance_number(o_player)) {
        global.winner = self.id;
    }
    
    //you are the only player left standing (everyone else hit void orbs)
    if (instance_number(o_player) == 1) {
        global.winner = self.id;
    }
}

// If you won, consume the entire screen
if (global.winner == self.id &amp;&amp; draw_radius &lt; room_width) {
    draw_radius += 40;
    depth = -999;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update

player_update_clean(o_player, o_orb);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_circle_precision(64);
draw_set_colour(color);
draw_trail(trail_length, radius * 2, color, -1, true, 1);
draw_circle(x, y, draw_radius, false);

if (nearest_orb != -1) {
    var width = 1;
    if (tethered) {
        width = 4;
    }   
    draw_line_width_colour(x, y, nearest_orb.x, nearest_orb.y, width, color, nearest_orb.color);
}

draw_set_halign(fa_center);
if (ricochet_reward == THEFT) {
    draw_text_transformed(x, y - 40, "THEFT", 2, 2, 0);
}
if (ricochet_reward == RELEASE) {
    draw_text_transformed(x, y - 40, "RELEASE", 2, 2, 0);
}

if (global.tmp_visuals_on) {
    player_debug_visuals();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
