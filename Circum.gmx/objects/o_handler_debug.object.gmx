<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Screen (Circular)
screen = surface_create(room_width, room_height);

x_start = 0;
y_start = 0;
start_coords_set = false;

orb_speed_set = 0;
orb_dir_set = 0;
orbit_radius_draw = 0;

player_color_set = c_white;
player_dir_set = 0;
player_radius_draw = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End, Restart, Fullscreen

if (keyboard_check_pressed(vk_escape)) {
    game_end();
}

if (keyboard_check_pressed(ord("R"))) {
    game_restart();
}

if (keyboard_check_pressed(ord("F"))) {
    window_set_fullscreen(!window_get_fullscreen());
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Objects

if (mouse_check_button(mb_left) || mouse_check_button(mb_right)) {
    if (!start_coords_set) {
        x_start = mouse_x;
        y_start = mouse_y;
        start_coords_set = true;
    }
}
if (mouse_check_button(mb_left)) {
    orb_speed_set = point_distance(x_start, y_start, mouse_x, mouse_y) / 100;
    orb_dir_set = point_direction(x_start, y_start, mouse_x, mouse_y);
}
if (mouse_check_button(mb_right)) {
    player_dir_set = point_direction(x_start, y_start, mouse_x, mouse_y);
    if (mouse_wheel_up()) {
        player_color_set = c_white;
    }
    if (mouse_wheel_down()) {
        player_color_set = c_black;
    }
}
if (mouse_check_button_released(mb_left)) {
    start_coords_set = false;
    if (keyboard_check(vk_shift)) {
        orb_speed_set = 0;
    }
    with (instance_create(x_start, y_start, o_orb_debug)) {
        speed = other.orb_speed_set;
        initial_speed = speed;
        direction = other.orb_dir_set;
    }
}
if (mouse_check_button_released(mb_right)) {
    start_coords_set = false;
    with (instance_create(x_start, y_start, o_player_debug)) {
        direction = other.player_dir_set;
        color = other.player_color_set;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Circlular Screen

surface_set_target(screen);
draw_clear_alpha(c_black, 1);  // make entire screen black
draw_set_blend_mode(bm_subtract);
// DRAW PRIMITIVE INSTEAD FOR GREATER PRECISION! (triangle--)
draw_set_circle_precision(64);
draw_circle(room_width/2, room_height/2, room_width/2, false);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
surface_reset_target();

if (surface_exists(screen)) {
    draw_surface(screen, 0, 0);
}
else {
    screen = surface_create(room_width, room_height);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Creation Guides

if (mouse_check_button(mb_left)) {
    draw_set_colour(c_white);
    orbit_radius_draw = lerp(orbit_radius_draw, 80, 0.1);
    draw_circle(x_start, y_start, orbit_radius_draw, true);
    if (!keyboard_check(vk_shift)) {
        draw_arrow(x_start, y_start, mouse_x, mouse_y, 20);
    }
} 
else {
    orbit_radius_draw = 0;
}

if (mouse_check_button(mb_right)) {
    draw_set_colour(player_color_set);
    player_radius_draw = lerp(player_radius_draw, 5, 0.1);
    draw_circle(x_start, y_start, player_radius_draw, true);
    var dir = point_direction(x_start, y_start, mouse_x, mouse_y);
    draw_arrow(x_start, y_start, x_start + lengthdir_x(100, dir), y_start + lengthdir_y(100, dir), 20);
}
else {
    player_radius_draw = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
