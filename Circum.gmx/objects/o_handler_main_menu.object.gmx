<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_cursor(cr_none); 
menu_reveal_radius = 0;
game_exit = false;

// init global vars
if (!instance_exists(o_globals)) {
    instance_create(0, 0, o_globals);
}

// Particles
p_emitter = part_emitter_create(global.p_system);
p_type = part_type_create();

// Screen (Circular)
screen = surface_create(room_width, room_height);
drawn_to_surface = false;

/// Menu
// TODO: levels and color selection should be loaded from file

// colors
color[0] = c_lime;
color_text[0] = "LIME";
color[1] = c_fuchsia;
color_text[1] = "FUCHSIA";
color[2] = c_aqua;
color_text[2] = "AQUA";
color[3] = c_yellow;
color_text[3] = "GOLD";

// text
menu_items[0, 0] = "PLAY";
menu_items[1, 0] = "LEVEL : " + string(global.current_level);
menu_items[2, 0] = "COLOR";
menu_items[3, 0] = "EXIT";

// scales
menu_items[0, 1] = 1;
menu_items[1, 1] = 1;
menu_items[2, 1] = 1;
menu_items[3, 1] = 1;

num_menu_item = 4;
current_item = 0;

//testing out fonts
big_fonts[0] = font_title;
big_fonts[1] = quicksand_bold_title;
big_fonts[2] = quicksand_book_title;//default, don't insert above
big_fonts[3] = quicksand_light_title;
num_big = array_length_1d(big_fonts);

small_fonts[0] = font_main;
small_fonts[1] = quicksand_bold_main;//default, don't insert above
small_fonts[2] = quicksand_book_main;
small_fonts[3] = quicksand_light_main;
num_small = array_length_1d(small_fonts);

font_index = 2*num_big + 1;//third big font, second small font

font_combos = num_big*num_small;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up

part_emitter_destroy(global.p_system, p_emitter);
part_type_destroy(p_type);

surface_free(screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ambient

background_particles();

play_background();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Interact

// Update items
if (global.current_level &gt; global.max_levels) {
    menu_items[1, 0] = "LEVEL : ?";
}
else {
    menu_items[1, 0] = "LEVEL : " + string(global.current_level);
}

// Font Cycle
if (keyboard_check_pressed(ord("F"))) {
    font_index = (font_index+1) % font_combos;
}

// Item Select
if (keyboard_check_pressed(vk_down)) {
    audio_play_sound(snd_menu_nav, 0, 0);
    if (++current_item &gt; num_menu_item - 1) {
        current_item = 0;
    } 
}
if (keyboard_check_pressed(vk_up)) {
    audio_play_sound(snd_menu_nav, 0, 0);
    if (--current_item &lt; 0) {
        current_item = num_menu_item - 1;
    } 
}
if (keyboard_check_pressed(vk_space)) {
    audio_play_sound(snd_menu_nav, 0, 0);
    switch(current_item) {
        case 0: // Play
            room_goto(rm_play);
            break;
        case 2: // Color Select
            global.color_index = (global.color_index + 1) % 4;
            global.player_color = color[global.color_index];
            break;
        case 3:
            menu_reveal_radius = room_width/2;
            game_exit = true;
        default:
            break;
    }
}

// Level Select
if (current_item == 1) {
    if (keyboard_check_pressed(vk_right) &amp;&amp; global.current_level &lt; global.levels_unlocked &amp;&amp; global.current_level &lt; global.max_levels + 1) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.current_level++;
    }
    else if (keyboard_check_pressed(vk_left) &amp;&amp; global.current_level &gt; 0) {
        audio_play_sound(snd_menu_nav, 0, 0);
        if (global.current_level &gt; global.max_levels) {
            global.current_level = global.max_levels;
        }
        else {
            global.current_level--;
        }
    }
}

// Color Select
if (current_item == 2) {
    if (keyboard_check_pressed(vk_right)) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.color_index = (global.color_index + 1) % 4;
        global.player_color = color[global.color_index];
    }
    else if (keyboard_check_pressed(vk_left)) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.color_index = (global.color_index + 3) % 4;
        global.player_color = color[global.color_index];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_halign(fa_center);

draw_set_font(big_fonts[font_index / num_big]);
draw_text(room_width/2, 512, "CIRCUM");

var menu_start = 734;
var menu_spacing = 64; 

draw_set_font(small_fonts[font_index % num_big]);
draw_set_valign(fa_center);
for (var i = 0; i &lt; num_menu_item; i++) {
    draw_set_alpha(1);
    
    if (current_item == i) {
        if (menu_items[i, 1] &lt; 1.5) {
            menu_items[i, 1] += 0.1;
        }
        draw_set_colour(global.player_color);
        var text_x = room_width/2;
        var text_y = menu_start + (menu_spacing * i * 2);
        
        if (current_item == 1) {  // level select
            var current_level;
            if (global.current_level &gt; global.max_levels) {
                current_level = "?";
            }
            else {
                current_level = global.current_level;
            }
            draw_text_transformed(text_x, text_y, current_level,  menu_items[i, 1], menu_items[i, 1], 0);
            
            var prev_level;
            if (global.current_level &gt; global.max_levels) {
                prev_level = global.max_levels;
            }
            else {
                prev_level = global.current_level - 1;
            }
            if (global.current_level &gt; 0) {
                draw_text_transformed(text_x-256, text_y, prev_level, menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
            }
            
            if (global.current_level + 1 &gt; global.levels_unlocked) {
                draw_set_alpha(0.5);
                draw_set_color(c_white);
            }
            var next_level;
            if (global.current_level == global.max_levels) {
                next_level = "?";  // random
            }
            else {
                next_level = global.current_level + 1;
            }
            if (global.current_level &lt; global.max_levels + 1) {
                draw_text_transformed(text_x+256, text_y, next_level, menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
            }
        }
        else if (current_item == 2) {  // color select
            draw_text_transformed(text_x, text_y, color_text[global.color_index], menu_items[i, 1], menu_items[i, 1], 0);
            draw_set_alpha(0.5);
            draw_set_color(c_white);
            draw_text_transformed(text_x+256, text_y, color_text[(global.color_index+1)%4], menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
            draw_text_transformed(text_x-256, text_y, color_text[(global.color_index+3)%4], menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
        }
        else {
            draw_text_transformed(text_x, text_y, menu_items[i, 0], menu_items[i, 1], menu_items[i, 1], 0);
        }
    }
    else {
        if (menu_items[i, 1] &gt; 1) {
            menu_items[i, 1] -= 0.05;
        }
        draw_set_colour(c_white);
        draw_text_transformed(room_width/2, menu_start + (menu_spacing * i * 2), menu_items[i, 0], menu_items[i, 1], menu_items[i, 1], 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Circlular Screen

if (!global.menu_opened) {
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);
    draw_set_blend_mode(bm_subtract);
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, menu_reveal_radius, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    if (menu_reveal_radius &lt; room_width/2) {
        menu_reveal_radius += 40;
    }
    else {
        menu_reveal_radius = room_width/2;
        global.menu_opened = true;
    }
}
else if (!drawn_to_surface) {  // this only needs to happen once
    drawn_to_surface = true;
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);  // make entire screen black
    draw_set_blend_mode(bm_subtract);
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, room_width/2, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
}

if (game_exit) {
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);
    draw_set_blend_mode(bm_subtract);
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, menu_reveal_radius, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    if (menu_reveal_radius &gt; 0) {
        menu_reveal_radius -= 40;
    }
    else {
        game_end();
    }
}

// Draw to surface
if (surface_exists(screen)) {
    draw_surface(screen, 0, 0);
}
else {
    screen = surface_create(room_width, room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
