<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_cursor(cr_none); 
menu_reveal_radius = 0;
game_exit = false;

// init global vars
if (!instance_exists(o_globals)) {
    instance_create(0, 0, o_globals);
}

if (global.current_level == RANDOM_LEVEL) {
    global.current_level = global.max_level_unlocked; 
}

// Particles
p_emitter = part_emitter_create(global.p_system);
p_type = part_type_create();

// Screen (Circular)
screen = surface_create(room_width, room_height);
drawn_to_surface = false;

/// Menu
// TODO: levels and color selection should be loaded from file
menu_start = 734;
menu_spacing = 64; 
num_menu_item = MENU_EXIT+1;
current_item = 0;

option_yval_default = menu_start + 2*menu_spacing;
option_yval_play = menu_start + MENU_OPTIONS*2*menu_spacing;
option_yval = option_yval_default;

exit_yval_default = option_yval + 2*menu_spacing;
exit_yval_options = option_yval + (MENU_EXIT-MENU_OPTIONS)*2*menu_spacing;
exit_yval = exit_yval_default;

// colors
color[0] = c_lime;
color_text[0] = "LIME";
color[1] = c_fuchsia;
color_text[1] = "FUCHSIA";
color[2] = c_aqua;
color_text[2] = "AQUA";
color[3] = c_yellow;
color_text[3] = "GOLD";

// text
menu_items[MENU_PLAY, 0] = "PLAY";
menu_items[SUBMENU_LEVEL, 0] = "LEVEL : " + string(global.current_level);
menu_items[SUBMENU_RANDOM, 0] = "RANDOM";
menu_items[MENU_OPTIONS, 0] = "OPTIONS";
menu_items[SUBMENU_COLOR, 0] = "COLOR";
menu_items[MENU_EXIT, 0] = "EXIT";

//which submenu, if any is open
submenu_state = CLOSED_SUBMENU;

//transition functions!
                                        //downward
closed_submenu_transition = build_array(MENU_OPTIONS,-1,-1,MENU_EXIT,-1,MENU_PLAY,
                                        //upward
                                        MENU_EXIT,-1,-1,MENU_PLAY,-1,MENU_OPTIONS);
                                        
                                    //downward
open_play_transition = build_array(SUBMENU_LEVEL,SUBMENU_RANDOM,MENU_OPTIONS,MENU_EXIT,-1,MENU_PLAY,
                                    //upward
                                    MENU_EXIT,MENU_PLAY,SUBMENU_LEVEL,SUBMENU_RANDOM,-1,MENU_OPTIONS);

                                        //downward
open_options_transition = build_array(MENU_OPTIONS,-1,-1,SUBMENU_COLOR,MENU_EXIT,MENU_PLAY,
                                        //upward
                                        MENU_EXIT,-1,-1,MENU_PLAY,MENU_OPTIONS,SUBMENU_COLOR);

// scales
for(var i = 0; i &lt; num_menu_item; i++){
    menu_items[i, 1] = 0;
    if (i == MENU_PLAY || i == MENU_OPTIONS || i == MENU_EXIT) {
        menu_items[i, 1] = 1;
    }
}

//testing out fonts
big_fonts[0] = font_title;
big_fonts[1] = quicksand_bold_title;
big_fonts[2] = quicksand_book_title;//default, don't insert above
big_fonts[3] = quicksand_light_title;
num_big = array_length_1d(big_fonts);

small_fonts[0] = font_main;
small_fonts[1] = quicksand_bold_main;//default, don't insert above
small_fonts[2] = quicksand_book_main;
small_fonts[3] = quicksand_light_main;
num_small = array_length_1d(small_fonts);

font_index = 2*num_big + 1;//3rd big (Quicksand book), 2nd small (Quicksand bold)

font_combos = num_big*num_small;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up

part_emitter_destroy(global.p_system, p_emitter);
part_type_destroy(p_type);

surface_free(screen);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ambient

background_particles();

play_background();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Interact

// Update Level Shown
menu_items[SUBMENU_LEVEL, 0] = "LEVEL : " + string(global.current_level);

// Font Cycle
if (keyboard_check_pressed(ord("F"))) {
    font_index = (font_index+1) % font_combos;
}

// Item Select
if (keyboard_check_pressed(vk_down)) {
    audio_play_sound(snd_menu_nav, 0, 0);
    switch(submenu_state){
    case CLOSED_SUBMENU:
        current_item = closed_submenu_transition[current_item];
        break;
    case OPEN_PLAY:
        current_item = open_play_transition[current_item];
        if (current_item == MENU_OPTIONS) { submenu_state = CLOSED_SUBMENU; }
        break;
    case OPEN_OPTIONS:
        current_item = open_options_transition[current_item];
        if (current_item == MENU_EXIT) { submenu_state = CLOSED_SUBMENU; }
        break;
    }
    
}

if (keyboard_check_pressed(vk_up)) {
    audio_play_sound(snd_menu_nav, 0, 0);
    switch(submenu_state){
    case CLOSED_SUBMENU:
        current_item = closed_submenu_transition[current_item+num_menu_item];
        break;
    case OPEN_PLAY:
        current_item = open_play_transition[current_item+num_menu_item];
        if (current_item == MENU_PLAY) { submenu_state = CLOSED_SUBMENU; }
        break;
    case OPEN_OPTIONS:
        current_item = open_options_transition[current_item+num_menu_item];
        if (current_item == MENU_OPTIONS) { submenu_state = CLOSED_SUBMENU; }
        break;
    }
}

//change submenu state or go to different room
if (keyboard_check_pressed(vk_space)) {
    audio_play_sound(snd_menu_nav, 0, 0);
    switch(current_item) {
        case MENU_PLAY:
            if (submenu_state != OPEN_PLAY) {
                submenu_state = OPEN_PLAY;
                current_item = SUBMENU_LEVEL;
            }
            else { submenu_state = CLOSED_SUBMENU; }
            break;
        
        case SUBMENU_LEVEL:
            room_goto(rm_play);
            break;
            
        case SUBMENU_RANDOM:
            global.current_level = RANDOM_LEVEL;
            room_goto(rm_play);
            break;
            
        case MENU_OPTIONS:
            if (submenu_state != OPEN_OPTIONS) {
                submenu_state = OPEN_OPTIONS;
                current_item = SUBMENU_COLOR;
            }
            else { submenu_state = CLOSED_SUBMENU; }
            break;
                        
        case MENU_EXIT:
            menu_reveal_radius = room_width/2;
            game_exit = true;
            
        default:
            break;
    }
}

// Level Select
if (current_item == SUBMENU_LEVEL) {
    if (keyboard_check_pressed(vk_right)
        &amp;&amp; global.current_level &lt; global.max_level_unlocked
        ) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.current_level++;
        menu_items[SUBMENU_LEVEL, 0] = "LEVEL : " + string(global.current_level);
    }
    else if (keyboard_check_pressed(vk_left) &amp;&amp; global.current_level &gt; 0) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.current_level--;
        menu_items[SUBMENU_LEVEL, 0] = "LEVEL : " + string(global.current_level);
    }
}

// Color Select
if (current_item == SUBMENU_COLOR) {
    if (keyboard_check_pressed(vk_right)) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.color_index = (global.color_index + 1) % 4;
        global.player_color = color[global.color_index];
    }
    else if (keyboard_check_pressed(vk_left)) {
        audio_play_sound(snd_menu_nav, 0, 0);
        global.color_index = (global.color_index + 3) % 4;
        global.player_color = color[global.color_index];
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FOR DEBUG PURPOSES ONLY: Max Level Unlocked De/Increment

if (keyboard_check(vk_shift)) {
    if (keyboard_check_pressed(vk_right) &amp;&amp; global.max_level_unlocked &lt; global.max_level) {
        global.max_level_unlocked++;
    }
    if (keyboard_check_pressed(vk_left) &amp;&amp; global.max_level_unlocked &gt; 0) {
        if (global.max_level_unlocked-- == global.current_level) {
            global.current_level--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_halign(fa_center);

draw_set_font(big_fonts[font_index / num_big]);
draw_text(room_width/2, 512, "CIRCUM");

draw_set_font(small_fonts[font_index % num_big]);
draw_set_valign(fa_center);

for (var i = 0; i &lt; num_menu_item; i++) {
    draw_set_alpha(1);
    
    var text_x = room_width/2;
    
    if (submenu_state == OPEN_PLAY) {
        option_yval = lerp(option_yval,option_yval_play,0.05);
        exit_yval = option_yval + 2*menu_spacing;
    }
    else {
        option_yval = lerp(option_yval,option_yval_default,0.05);
        if (submenu_state == OPEN_OPTIONS) { exit_yval = lerp(exit_yval,exit_yval_options,0.05); }
        else { exit_yval = lerp(exit_yval,exit_yval_default,0.05); }
    }
    
    var text_y = menu_start + (menu_spacing * i * 2);
    if (i == MENU_EXIT) { text_y = exit_yval; }
    else if (i &gt;= MENU_OPTIONS) { text_y = option_yval + (i - MENU_OPTIONS)*2*menu_spacing; }
    
    //not the current selection
    if (current_item != i) {
        draw_set_colour(c_white);
        var color_to = 0;
        var level_to = 0;
        var random_to = 0;
        
        switch(submenu_state){
        case CLOSED_SUBMENU:
            break;
        case OPEN_PLAY:
            level_to = 1;
            random_to = 1;
            if (i == MENU_PLAY || i == MENU_OPTIONS || i == MENU_EXIT) {
                draw_set_alpha(0.1);
            }
            break;
        case OPEN_OPTIONS:
            color_to = 1;
            if (i == MENU_PLAY || i == MENU_OPTIONS || i == MENU_EXIT) {
                draw_set_alpha(0.1);
            }
            break;
        }
        menu_items[SUBMENU_COLOR, 1] = lerp(menu_items[SUBMENU_COLOR, 1], color_to, 0.05);
        menu_items[SUBMENU_LEVEL, 1] = lerp(menu_items[SUBMENU_LEVEL, 1], level_to, 0.05);
        menu_items[SUBMENU_RANDOM, 1] = lerp(menu_items[SUBMENU_RANDOM, 1], random_to, 0.05);

        if (menu_items[i, 1] &gt; 1) {
            menu_items[i, 1] -= 0.05;
        }
        
        draw_text_transformed(text_x, text_y, menu_items[i, 0], menu_items[i, 1], menu_items[i, 1], 0);
        continue;
    }
    
    //the current selection
    if (menu_items[i, 1] &lt; 1.5) {
        menu_items[i, 1] += 0.1;
    }
    draw_set_colour(global.player_color);
    
    if (current_item == SUBMENU_LEVEL) {  // level select
    
        //current
        draw_text_transformed(text_x, text_y, global.current_level,
                                menu_items[i, 1], menu_items[i, 1], 0);

        //previous
        if (global.current_level &gt; 0) {
            draw_text_transformed(text_x-256, text_y, global.current_level-1,
                                    menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
        }
        
        //next
        if (global.current_level &lt; global.max_level) {
            
            if (global.current_level == global.max_level_unlocked) {
                draw_set_alpha(0.5);
                draw_set_color(c_white);
            }
            
            draw_text_transformed(text_x+256, text_y, global.current_level+1,
                                    menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
        }
        
    }
    
    else if (current_item == SUBMENU_COLOR) {  // color select
        draw_text_transformed(text_x, text_y, color_text[global.color_index], menu_items[i, 1], menu_items[i, 1], 0);
        draw_set_alpha(0.5);
        draw_set_color(c_white);
        draw_text_transformed(text_x+256, text_y, color_text[(global.color_index+1)%4], menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
        draw_text_transformed(text_x-256, text_y, color_text[(global.color_index+3)%4], menu_items[i, 1] / 2, menu_items[i, 1] / 2, 0);
    }
    
    else {
        draw_text_transformed(text_x, text_y, menu_items[i, 0], menu_items[i, 1], menu_items[i, 1], 0);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade-in
if (global.alpha_transition &gt; 0.001) {
    draw_set_alpha(global.alpha_transition);
    global.alpha_transition = lerp(global.alpha_transition,0,0.1);
    draw_set_color(global.player_color);
    draw_circle(SCREEN_RADIUS,SCREEN_RADIUS,SCREEN_RADIUS,false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Circlular Screen

if (!global.menu_opened) {
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);
    draw_set_blend_mode(bm_subtract);
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, menu_reveal_radius, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    if (menu_reveal_radius &lt; room_width/2) {
        menu_reveal_radius += 40;
    }
    else {
        menu_reveal_radius = room_width/2;
        global.menu_opened = true;
    }
}
else if (!drawn_to_surface) {  // this only needs to happen once
    drawn_to_surface = true;
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);  // make entire screen black
    draw_set_blend_mode(bm_subtract);
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, room_width/2, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
}

if (game_exit) {
    surface_set_target(screen);
    draw_clear_alpha(c_black, 1);
    draw_set_blend_mode(bm_subtract);
    draw_set_circle_precision(64);
    draw_circle(room_width/2, room_height/2, menu_reveal_radius, false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    if (menu_reveal_radius &gt; 0) {
        menu_reveal_radius -= 40;
    }
    else {
        game_end();
    }
}

// Draw to surface
if (surface_exists(screen)) {
    draw_set_alpha(1);
    draw_surface(screen, 0, 0);
}
else {
    screen = surface_create(room_width, room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
