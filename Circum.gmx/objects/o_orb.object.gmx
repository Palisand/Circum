<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic

type = DEFAULT_ORB;

capturer = -1;
captured = false;

// for capture streaks
guarder = -1;
guarded = false;

orbit_radius = 80;
radius = orbit_radius / 2;

direction = random(360);
initial_speed = random_range(3, 7);
speed = initial_speed;

// collision
col_orb = false;
col_edge = false;
col_player = false;
col_orb_coords[0] = 0; // x
col_orb_coords[1] = 0; // y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw &amp; FX

color = c_dkgray;
fill_alpha = 0;
fill_alpha_rate = 0.04;
orbit_radius_alpha = 0;
orbit_radius_alpha_max = 0.5;
orbit_radius_alpha_rate = 0.1;

p_emitter = part_emitter_create(global.p_system);
p_type = part_type_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// un-guard

guarded = false;
guarder = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update

orb_update(o_orb);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Orb
var scale = radius * 2/sprite_get_width(s_ring);
draw_sprite_ext(s_ring, 0, x, y, scale, scale, 0, c_white, 1 - fill_alpha);
draw_sprite_ext(s_ring, 0, x, y, scale, scale, 0, color, fill_alpha); 

// Orbit
draw_set_alpha(orbit_radius_alpha);
draw_set_blend_mode(bm_add);
draw_circle_colour(x, y, orbit_radius, c_black, color, false);
draw_set_blend_mode(bm_normal);
draw_set_alpha(1);

// Debug Visuals
if (global.tmp_visuals_on) {
    draw_line(x, y, x + lengthdir_x(orbit_radius, direction), y + lengthdir_y(orbit_radius, direction));
    draw_set_colour(c_white);
    var dir = point_direction(x, y, room_width/2, room_height/2);
    draw_line(x, y, x + lengthdir_x(orbit_radius, dir), y + lengthdir_y(orbit_radius, dir));
    draw_circle(x, y, orbit_radius, true);

    // Guard alarm
    draw_text_transformed(x, y + orbit_radius, alarm[0], 2, 2, 0);

    // Orb type
    switch (type) {
        case DEAD_ORB:
            draw_text(x, y, "DEAD");
            break;
        case VOID_ORB:
            draw_text(x, y, "VOID");
            break;
        case MASTER_ORB:
            draw_text(x, y, "MASTER");
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
